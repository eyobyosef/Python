#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define VECTOR_SIZE 1000

// Function to calculate the dot product using a loop
double calculateDotProductLoop(const double vectorA[], const double vectorB[]) {
    double result = 0.0;
    for (int i = 0; i < VECTOR_SIZE; i++) {
        result += vectorA[i] * vectorB[i];
    }
    return result;
}

// Function to calculate the dot product using vectorization
double calculateDotProductVectorized(const double vectorA[], const double vectorB[]) {
    double result = 0.0;
    for (int i = 0; i < VECTOR_SIZE; i++) {
        result += vectorA[i] * vectorB[i];
    }
    return result;
}

int main() {
    double vectorA[VECTOR_SIZE];
    double vectorB[VECTOR_SIZE];

    // Initialize the vectors with random values
    srand(time(NULL));
    for (int i = 0; i < VECTOR_SIZE; i++) {
        vectorA[i] = (double)rand() / RAND_MAX;
        vectorB[i] = (double)rand() / RAND_MAX;
    }

    // Measure time for the loop-based method
    clock_t start = clock();
    double resultLoop = calculateDotProductLoop(vectorA, vectorB);
    clock_t end = clock();
    double timeLoop = (double)(end - start) / CLOCKS_PER_SEC;

    // Measure time for the vectorized method
    start = clock();
    double resultVectorized = calculateDotProductVectorized(vectorA, vectorB);
    end = clock();
    double timeVectorized = (double)(end - start) / CLOCKS_PER_SEC;

    // Compare results and calculate speedup
    double speedup = timeLoop / timeVectorized;

    // Print results
    printf("Dot product using a loop: %f\n", resultLoop);
    printf("Dot product using vectorization: %f\n", resultVectorized);
    printf("Speedup: %f\n", speedup);

    return 0;
}
